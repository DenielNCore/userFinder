{"version":3,"sources":["parsers/UserData.js","parsers/SelectedUserData.js","redux/reducers/users.js","redux/reducers/index.js","redux/actionTypes.js","redux/store.js","constants.js","Router.js","components/User.js","redux/actions.js","redux/selectors.js","components/UserList.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["UserData","id","login","html_url","avatar_url","this","column","type","content","htmlUrl","avatarUrl","Object","values","filter","prop","sort","a","b","SelectedUserData","data","name","followers","following","created_at","company","email","location","blog","bio","createdAt","selected","initialState","list","search","getUserData","combineReducers","users","state","action","payload","page","amount","map","user","createStore","rootReducer","DOMAIN","TABLE_COLUMN_NAMES","getResponse","fetch","response","json","console","log","getUserById","getUsersByPage","User","onClickHandler","props","toggleUser","key","getType","className","cx","href","src","alt","onClick","col","getElement","React","Component","connect","getUserState","store","getUsers","getUserLists","getUsersBySelectFilter","el","length","SearchBar","updatePage","setState","updateAmount","startSearch","updateList","min","max","onChange","e","target","value","step","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00e5360b.chunk.js","sourcesContent":["export class UserData {\n    constructor({ id, login = '', html_url = '', avatar_url = '' }) {\n        this.id = id;\n\n        this.login     = { column: 0, type: 'text', content: login };\n        this.htmlUrl   = { column: 1, type: 'link', content: html_url };\n        this.avatarUrl = { column: 2, type: 'img', content: avatar_url };\n    }\n\n    get data() {\n        return Object.values(this)\n            .filter((prop) => prop && prop.type)\n            .sort((a, b) => a.column - b.column);\n    }\n}","import { UserData } from './UserData';\n\n\nexport class SelectedUserData extends UserData {\n    constructor(data) {\n        const { name, followers, following, created_at, company, email, location, blog, bio } = data;\n        super(data);\n\n        this.name      = { column: 3, type: 'text', content: name };\n        this.followers = { column: 4, type: 'text', content: followers };\n        this.following = { column: 5, type: 'text', content: following };\n        this.createdAt = { column: 6, type: 'text', content: created_at };\n        this.company   = { column: 7, type: 'text', content: company };\n        this.email     = { column: 8, type: 'text', content: email };\n        this.location  = { column: 9, type: 'text', content: location };\n        this.blog      = { column: 10, type: 'link', content: blog };\n        this.bio       = { column: 11, type: 'text', content: bio };\n\n        this.selected = true;\n    }\n}","import { TOGGLE_USER, UPDATE_LIST } from '../actionTypes';\nimport { UserData } from '../../parsers/UserData';\nimport { SelectedUserData } from '../../parsers/SelectedUserData';\n\n\nconst initialState = {\n    list    : [],\n    search  : {},\n    selected: {},\n};\n\nconst getUserData = (data, selected = false) => {\n    if (selected) return new SelectedUserData(data);\n    return new UserData(data);\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case UPDATE_LIST: {\n            const { page, amount, list } = action.payload;\n            return {\n                list    : list.map(data => getUserData(data)),\n                search  : { page, amount },\n                selected: {},\n            };\n        }\n        case TOGGLE_USER: {\n            const { id, data } = action.payload;\n            return {\n                ...state,\n                list    : state.list.map((user) => (id === user.id ? getUserData(data, !state.selected[id]) : user)),\n                selected: {\n                    ...state.selected,\n                    [id]: !state.selected[id],\n                },\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport users from './users';\n\n\nexport default combineReducers({ users });\n","export const UPDATE_LIST = 'UPDATE_LIST';\nexport const TOGGLE_USER = 'TOGGLE_USER';\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\n\nexport default createStore(rootReducer);\n","export const DOMAIN = 'https://api.github.com';\nexport const MAX_USERS_ON_PAGE = 100;\nexport const TABLE_COLUMN_NAMES = [\"login\", \"link\", \"avatar\", \"name\", \"followers\", \"following\", \"created at\", \"company\", \"email\", \"location\", \"blog\", \"bio\" ];","import { DOMAIN } from './constants';\n\n\nconst getResponse = async (data) => {\n    try {\n        let response = await fetch(data);\n        return await response.json() || [];\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nexport const getUserById = ({ login }) => getResponse(`${DOMAIN}/users/${login}`);\n\nexport const getUsersByPage = ({ page, amount }) =>\n    getResponse(`${DOMAIN}/users?per_page=${amount}&since=${amount * (page - 1)}`);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport cx from 'classnames';\nimport { toggleUser } from '../redux/actions';\nimport { getUserById } from '../Router';\n\n\nclass User extends React.Component {\n    onClickHandler = async user => {\n        const { login, id } = user;\n        const { content }   = login;\n        const data          = await getUserById({ login: content });\n        this.props.toggleUser({ data, id });\n    };\n\n    getElement({ type, content, column }, selected) {\n        return (\n            <td key={`user__data__cell${column}`}>\n                {this.getType({ type, content, column }, selected)}\n            </td>\n        );\n    }\n\n    getType({ type, content, column }, selected) {\n        switch (type) {\n            case 'text':\n                return (<span className={cx('user__data__text', selected && 'user__data__text--selected')}>\n                    {content}\n                </span>);\n            case 'link':\n                return (<a className={cx('user__data__link', selected && 'user__data__link--selected')} href={content}>\n                    {content}\n                </a>);\n            case 'img':\n                return (<img className={cx('user__data__img', selected && 'user__data__img--selected')}\n                             src={content} alt={'avatar'}/>);\n            default:\n                return null;\n        }\n    }\n\n    render() {\n        const { user } = this.props;\n        return (user ?\n                <tr className=\"user__row\" onClick={() => this.onClickHandler(user)}>\n                    {user.data.map(col => this.getElement(col, user.selected))}\n                </tr>\n                : null\n        );\n    }\n}\n\n\nexport default connect(\n    null,\n    { toggleUser },\n)(User);\n","import { UPDATE_LIST, TOGGLE_USER } from './actionTypes';\n\n\nexport const updateList = ({ list, page, amount }) => ({\n    type   : UPDATE_LIST,\n    payload: { list, page, amount },\n});\n\nexport const toggleUser = ({ data, id }) => ({\n    type   : TOGGLE_USER,\n    payload: { id, data },\n});\n","export const getUserState = store => store.users;\n\nexport const getUserLists = store =>\n    getUserState(store) ? getUserState(store).list : [];\n\nexport const getUsers = store => getUserLists(store);\n\nexport const getUsersBySelectFilter = (store) => {\n    return getUsers(store);\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport User from './User';\nimport { getUsersBySelectFilter } from '../redux/selectors';\nimport { TABLE_COLUMN_NAMES } from '../constants';\n\n\nconst UserList = ({ users }) => (\n    <table className=\"user-list\">\n        <thead>\n        <tr>\n            {TABLE_COLUMN_NAMES.map(el => <th key={`${el}`}> {el}</th>)}\n        </tr>\n        </thead>\n        <tbody>\n        {users && users.length\n            ? users.map(user => <User key={`user-${user.id}`} user={user}/>)\n            : null}\n        </tbody>\n    </table>\n);\n\nconst mapStateToProps = state => {\n    const users = getUsersBySelectFilter(state);\n    return { users };\n};\n\nexport default connect(mapStateToProps)(UserList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateList } from '../redux/actions';\nimport { MAX_USERS_ON_PAGE } from '../constants';\nimport { getUsersByPage } from '../Router';\n\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            amount: MAX_USERS_ON_PAGE,\n            page  : 1,\n        };\n    }\n\n    updatePage = page => {\n        this.setState({ page });\n    };\n\n    updateAmount = amount => {\n        this.setState({ amount });\n    };\n\n    startSearch = async () => {\n        const { page, amount } = this.state;\n        let list               = await getUsersByPage({ page, amount });\n        this.props.updateList({ list, page, amount });\n    };\n\n    render() {\n        return (\n            <div className={\"users__search__bar\"}>\n                <span>Page</span>\n                <input type={'number'} min={1} max={100000}\n                       onChange={e => this.updatePage(e.target.value)}\n                       value={this.state.page}\n                />\n                <span>Limit</span>\n                <input type={'number'} min={10} step={10} max={1000}\n                       onChange={e => this.updateAmount(e.target.value)}\n                       value={this.state.amount}\n                />\n                <button className=\"add-todo\" onClick={this.startSearch}>\n                    Show users\n                </button>\n            </div>\n        );\n    }\n}\n\n\nexport default connect(\n    null,\n    { updateList },\n)(SearchBar);\n","import React from 'react';\nimport './App.css';\nimport UserList from './components/UserList';\nimport SearchBar from './components/SearchBar';\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\n            <SearchBar/>\n\n            <UserList/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'),\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}